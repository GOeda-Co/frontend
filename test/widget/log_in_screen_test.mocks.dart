// Mocks generated by Mockito 5.4.6 from annotations
// in frontend/test/log_in_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:frontend/api/api.dart' as _i2;
import 'package:frontend/sso/storage.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i2.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String?> register(String? email, String? password, String? name) =>
      (super.noSuchMethod(
            Invocation.method(#register, [email, password, name]),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  void decodeToken(String? token) => super.noSuchMethod(
    Invocation.method(#decodeToken, [token]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<String?> login(String? email, String? password, int? appId) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email, password, appId]),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<String?> addCard({
    required String? word,
    required String? translation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addCard, [], {
              #word: word,
              #translation: translation,
            }),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<String?> addCardString({
    required String? word,
    required String? translation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addCardString, [], {
              #word: word,
              #translation: translation,
            }),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<Map<String, dynamic>?> addDeck({
    required String? name,
    required String? description,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addDeck, [], {
              #name: name,
              #description: description,
            }),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<bool> addCardToDeck({
    required String? deckId,
    required String? cardId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addCardToDeck, [], {
              #deckId: deckId,
              #cardId: cardId,
            }),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<dynamic>?> getCardsByDeckId(String? deckId) =>
      (super.noSuchMethod(
            Invocation.method(#getCardsByDeckId, [deckId]),
            returnValue: _i3.Future<List<dynamic>?>.value(),
          )
          as _i3.Future<List<dynamic>?>);

  @override
  _i3.Future<bool> deleteDeck(String? deckId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDeck, [deckId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TokenStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenStorage extends _i1.Mock implements _i4.TokenStorage {
  MockTokenStorage() {
    _i1.throwOnMissingStub(this);
  }
}
